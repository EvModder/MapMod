package net.evmodder.KeyBound.Commands;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashSet;
import java.util.UUID;
import com.mojang.brigadier.arguments.BoolArgumentType;
import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.context.CommandContext;
import net.evmodder.EvLib.FileIO;
import net.evmodder.KeyBound.MapGroupUtils;
import net.fabricmc.fabric.api.client.command.v2.ClientCommandManager;
import net.fabricmc.fabric.api.client.command.v2.ClientCommandRegistrationCallback;
import net.fabricmc.fabric.api.client.command.v2.FabricClientCommandSource;
import net.minecraft.client.world.ClientWorld;
import net.minecraft.component.type.MapIdComponent;
import net.minecraft.item.map.MapState;
import net.minecraft.text.Text;

public class CommandSetMapArtGroup{
	private final int MAX_MAPS_IN_INV_AND_ECHEST = 64*27*(36+27); // 108864

//	private int countMapIds(ItemStack stack, ClientWorld world){
//		if(stack.isEmpty()) return 0;
//		ContainerComponent container = stack.get(DataComponentTypes.CONTAINER);
//		if(container != null) return container.stream().map(s -> countMapIds(s, world)).mapToInt(Integer::intValue).sum();
//		return stack.getComponents().contains(DataComponentTypes.MAP_ID) ? 1 : 0;
//	}
//	private int getNumMapsInInvAndEchest(){
//		int minIdsToCheck = 0;
//		for(ItemStack stack : client.player.getEnderChestInventory().getHeldStacks()){
//			minIdsToCheck += countMapIds(stack, client.world);
//		}
//		for(int i=0; i<client.player.getInventory().size(); ++i){
//			minIdsToCheck += countMapIds(client.player.getInventory().getStack(i), client.world);
//		}
//		ctx.getSource().sendFeedback(Text.literal("Min Ids to check: "+minIdsToCheck));
//		return minIdsToCheck;
//	}

	//TODO: /mapartgroup <set/create/compare> <g1> [g2]
	private int setActiveGroupFromLoadedMaps(final ClientWorld world){
		if(MapGroupUtils.mapsInGroup == null) MapGroupUtils.mapsInGroup = new HashSet<>();
		else MapGroupUtils.mapsInGroup.clear();
		int i=0;
		MapState mapState;
		while((mapState=world.getMapState(new MapIdComponent(i))) != null || i < MAX_MAPS_IN_INV_AND_ECHEST/*getNumMapsInInvAndEchest()*/){
			if(mapState != null){
				if(MapGroupUtils.INCLUDE_UNLOCKED || mapState.locked) MapGroupUtils.mapsInGroup.add(MapGroupUtils.getIdForMapState(mapState));
			}
			++i;
		}
		if(MapGroupUtils.mapsInGroup.isEmpty()){
			MapGroupUtils.mapsInGroup = null;
			return 0;
		}
		return MapGroupUtils.mapsInGroup.size();
	}
	private int runCommandNoArg(final CommandContext<FabricClientCommandSource> ctx){
		final int numLoaded = setActiveGroupFromLoadedMaps(ctx.getSource().getWorld());
		if(numLoaded == 0) ctx.getSource().sendFeedback(Text.literal("No maps found").copy().withColor(/*&c=*/16733525));
		else ctx.getSource().sendFeedback(Text.literal("Set the current active group (ids: "+MapGroupUtils.mapsInGroup.size()+").").copy().withColor(/*&a=*/5635925));
		return 1;
	}
	private int runCommandWithGroupNameAndAppend(final FabricClientCommandSource source, final String groupName, final boolean append){
		final byte[] data = FileIO.loadFileBytes("mapart_group_"+groupName);
		if(data != null){
			final int numIdsInFile = data.length / 16;
			if(numIdsInFile*16 != data.length){
				source.sendFeedback(Text.literal("Corrupted/unrecognized map group file").copy().withColor(/*&c=*/16733525));
				return 1;
			}
			if(append && setActiveGroupFromLoadedMaps(source.getWorld()) != 0)/**/;
			else if(MapGroupUtils.mapsInGroup == null) MapGroupUtils.mapsInGroup = new HashSet<>(numIdsInFile);
			else MapGroupUtils.mapsInGroup.clear();
			final ByteBuffer bb = ByteBuffer.wrap(data);
			for(int i=0; i<numIdsInFile; ++i) MapGroupUtils.mapsInGroup.add(new UUID(bb.getLong(), bb.getLong()));
			if(MapGroupUtils.mapsInGroup.size() == numIdsInFile){
				source.sendFeedback(Text.literal("Loaded group '"+groupName+"' (ids: "+ MapGroupUtils.mapsInGroup.size()+").").copy().withColor(/*&6=*/16755200));
				return 1;
			}
		}
		else{
			final int numLoaded = setActiveGroupFromLoadedMaps(source.getWorld());
			if(numLoaded == 0){
				source.sendFeedback(Text.literal("No maps found").copy().withColor(/*&c=*/16733525));
				return 1;
			}
		}

		final ByteBuffer bb = ByteBuffer.allocate(MapGroupUtils.mapsInGroup.size()*16);
		for(UUID uuid : MapGroupUtils.mapsInGroup){
			bb.putLong(uuid.getMostSignificantBits());
			bb.putLong(uuid.getLeastSignificantBits());
		}
		FileIO.saveFileBytes("mapart_group_"+groupName, bb.array());

		source.sendFeedback(Text.literal(
				(data == null ? "Created new" : "Modified") + " group '"+groupName
				+"' and set as active (ids: "+ (data == null ? "" : (data.length/16)+" -> ") + MapGroupUtils.mapsInGroup.size()+").").copy().withColor(/*&a=*/5635925));
		return 1;
	}
	private int runCommandWithGroupName(CommandContext<FabricClientCommandSource> ctx){
		final String groupName = ctx.getArgument("group_name", String.class);
		return runCommandWithGroupNameAndAppend(ctx.getSource(), groupName, /*append=*/false);
	}
	private int runCommandWithGroupNameAndAppend(CommandContext<FabricClientCommandSource> ctx){
		final String groupName = ctx.getArgument("group_name", String.class);
		final Boolean append = ctx.getArgument("append", Boolean.class);
		return runCommandWithGroupNameAndAppend(ctx.getSource(), groupName, append);
	}

	public CommandSetMapArtGroup(){
		ClientCommandRegistrationCallback.EVENT.register(
//				new ClientCommandRegistrationCallback(){
//				@Override public void register(CommandDispatcher<FabricClientCommandSource> dispatcher, CommandRegistryAccess registryAccess){
				(dispatcher, _0) -> {
			dispatcher.register(
				ClientCommandManager.literal("setmapartgroup")
				.executes(this::runCommandNoArg)
				.then(
					ClientCommandManager.argument("group_name", StringArgumentType.word())
					.suggests(
//						new SuggestionProvider<FabricClientCommandSource>(){
//							@Override public CompletableFuture<Suggestions> getSuggestions(
//							CommandContext<FabricClientCommandSource> ctx, SuggestionsBuilder builder) throws CommandSyntaxException
					(ctx, builder) -> {
							int i = ctx.getInput().lastIndexOf(' ');
							String lastArg = i == -1 ? "" : ctx.getInput().substring(i+1);
							try{
								Files.list(Paths.get(FileIO.DIR)).map(path -> path.getFileName().toString())
								.filter(name -> name.startsWith("mapart_group_") && name.startsWith(lastArg, 13))
								.forEach(name -> builder.suggest(name.substring(13)));
							}
							catch(IOException e){e.printStackTrace(); return null;}
							// Lock the suggestions after we've modified them.
							return builder.buildFuture();//TODO: why not .build() ?
					})
					.executes(this::runCommandWithGroupName)
					.then(
						ClientCommandManager.argument("append", BoolArgumentType.bool())
						.suggests((ctx, builder) -> BoolArgumentType.bool().listSuggestions(ctx, builder))
						.executes(this::runCommandWithGroupNameAndAppend)
					)
	//				.then(ClientCommandManager.argument("value_two", StringArgumentType.word()).executes(this::runCommandWithTwoArgs)
				)
			);
		});
	}
}
